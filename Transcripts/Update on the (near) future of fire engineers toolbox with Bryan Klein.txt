 Hello everybody, welcome to the Fire Science Show. A year ago we've done an episode with Brian Klein from Thunderhead Engineering in which we tried to cover some future of fire modeling and some of our assumptions of how the future of fire modeling will look like. I mean, we're not that far into the future, it's just one and a half year-ish from the episode, but a lot has changed in the industry. We are in the middle of AI chat GPT revolution. I am entering GPU-based solver revolution, and there is a lot of interesting developments that I do not see covered anywhere else in the internet, like some new additions to FDS, some new improvements in FDS, and of course for Thunderhead Engineering, the premiere of their new project Ventus, which is graphics user interface for well-known Contem model. I actually have not used Contem at all in my life. All I knew about Contem before this episode is that it can solve pressures and that it's painful. And hopefully, Thunderhead removed the second part. and that it's painful and hopefully Tadej had removed the second part so now it's just useful but yeah in this episode I am learning about content so you can learn about it with me and yeah a lot to cover a lot of topics today not just one topic but we jump from one to another but I hope this gives you a very broad overview of what's happening around. And if you have ideas about what should be covered in future episodes or what should I cover in the Q&A episodes of the podcast, please send them out my way. You can do that through the website. You can do that through the email. I will appreciate it a lot and I'll try to answer your questions, broaden my views and find some interesting things to talk about in the podcast. And for now, please let me invite you to the very interesting overview of the near-future fire modeling with Brian Klein once again. Welcome to the Fire Science Show. My name is Wojciech Wigrzy≈Ñski and I will be your host. Fire Sense Show is brought to you in collaboration with OFR Consultants, a multi-award winning independent consultancy dedicated to addressing fire safety challenges. OFR is the UK's leading fire risk consultancy and its globally established team has developed a reputation for preeminent fire engineering expertise with colleagues working across the world to help protect people, property and planet. In UK, that includes the development of Printworks building in Canada Water, one of the tallest residential buildings in Birmingham, as well as historic structures like the National Gallery, National History Museum, and National Portrait Gallery in London. Internationally, its work ranges from Antarctic to the Atacama Desert in Chile to the number of projects in Africa. In 2023, OFR is growing its team and is keen to hear from industry professionals who want to collaborate on fire safety features, get in touch at OFAConsultants.com. And now, back to the updates in fire modeling. Hello, everybody. Welcome to the Fire Science Show. I'm today here with Brian Klein from Thunderhead Engineering. Hello, Brian. Hello. It's good to be here again. Yeah, again. Some episodes ago, episode 39, we've done some predictions for the future of fire modeling. So let's see what happened, what didn't happen. And let's try to make some new predictions. So in some time from now, we can revisit them. All right. Yeah, we've been talking for half an hour already outside. And we just decided to randomly press record because that was good. We'll get back to it. I think we need to start over so the listeners are on the same position that we are in this very interesting chat so far. So some things happened since the last talk. One is the big release from Thunderhead Engineering Venturesus, the graphical interface for Quantum software. In the last episode, we've discussed that it's a very highly requested feature for you. I had also episodes with, for example, David Stacy, who was a fire engineer in the U.S., and he mentioned that Quantum is very widely used in U.S. as well. Please tell me, what is Contem in general? Because I think for much of the European audience, they would not be very well exposed to Contem. And I've never came into Contem in my professional career. Yeah, sure. So I think in other parts of the world, it's something that MEPs do with, you know, spreadsheets and hand calculations and things. And in the U.S., the same organization that created FDS also has another division, this Building and Energy Environment Division, who built a tool called Contam. And it's been around for quite a while. And really, its focus is calculating things like building airflow rates, relative pressures between zones. It's a multi-zone solver, very much like a node network solver. So you can take a look at like ventilation rates over time, looking at differential pressures over different kinds of openings or leakage paths. You know, it's all about flow paths between zones and whether they're mechanical or natural flow, naturally ventilated, and then what's happening. What's happening in this whole building through all of these connections over time. The scale is scale is building wise so you would model the whole building yeah it's a full building as a network of compartments connected to leakages openings hvcs events exactly exactly so yeah you'd have like let's say you have a door in a wall the wall would have its own area-based leak rate. So you might have two leakage types. In a particular wall, you might have the leakage area per unit area. And I think I mentioned that. And then you might have a door as well. And the door might have an orifice of a certain size. And it could have a different leakage depending on if it's open or closed, right? So when it's closed, it's just the gaps around the door and underneath or above. When it's open, it's the full opening. And you could then run the condition like, what does the stairwell pressurization look like with these doors open or closed with different doors on different levels in addition to some kind of pressure coming from the fire floor, right, that you've got to account for. So that's it. Contam also has transient analysis. It can do some things like looking at species concentrations throughout the zones over time through all these different leak paths. There are some capabilities in addition to that with like it's used a lot, I think, in the energy analysis sector. So people just looking at like heating and cooling rates of buildings over time with different sun exposures and wind factors and all these kind of things. So there's, I think, a tool called Energy Plus. This is something we haven't dug into too much yet because we've been focused on fire protection engineering, but there's some other work in that area too to kind of handle just energy movement and just heat and what do you do with things. Are you cooling fast enough or not? And can you give me some use cases? Like how would your users use condom? Like what would they produce with it? What's the engineer's outcome of that analysis? Yeah. The first phase of, we have different kind of plans. We have different plans and different phases. Our first phase was really to address the static pressure analysis needs. So that's in the US a lot, there's a requirement for a pressurization study as part of the rational analysis to look at delta P and velocities across different doors, let's say in a stairwell, so that the doors can be opened against the pressure, but also are pressurized enough to maintain smoke control in the stairwell, for example. So looking at that, there might be like an analysis of let's see what's all the minimum and maximum pressure differentials across every door in a stairwell. Same thing for maybe an elevator shaft and accounting for the stack effect and also just pressurization effects in elevator shafts. Any kind of maybe mechanical chase or something where pressures can, you know, some smoke could infiltrate and be spread vertically through the building. Does that include for exterior conditions like temperature difference, wind? Yep. So you can assign wind profiles from different directions on exterior-facing walls. So you can have a special kind of a flow path that says this connection is to this interior zone with some connection to ambient, and the ambient is a certain temperature with a wind force at a particular angle relative to that normal and then it will account for wind effect and normally in fe analysis they'll do the four cardinal directions of wind or southeast west in addition to the summer and summer and winter condition so that changes maybe stack effect or buoyancy in the stairwells that maybe they're heated or not heated. So yeah, there's a lot of variation you can do with that. And then across all of those different conditions and all of the different states, like different door open and closed combinations, you want to do this total analysis. That's okay. Do I exceed the pressure requirement or am I okay if I hit my tolerances and stuff like that. So that's the first target use case that we focused on. And that's the most common, I think, use case in fire protection engineering. So this would be a part of almost every engineering analysis for a building when you're just exploring. Yeah. So in the US, this is part of the IBC, the building code requirements is over a certain number of levels. You have to do these pressurization studies. So it's very common to be a requirement. And people have been using traditionally Contam W, which is a Windows based graphical interface developed by NIST, who develops the simulator as well. It's a bit difficult to use. It's kind of tedious. It's not really 3D. You're kind of working on schematic drawings of each level with little pixels that represent like a wall or event path or whatever. And so, you know, the request to us over the years has been, could you just make a 3D graphical interface where I can see the whole building? I can see all my floors relative to each other and all of the bits and pieces help me with the analysis, the post-processing of all the results. So that's that was our focus. We started based on, we kind of leveraged a lot of the work we had done in Pathfinder as a starting point to be able to define room areas and then extend those up, extrude those into zones, and then connect those zones with connections like flow paths. Sounds like what Pathfinder does. So yeah, there's a good starting point. Yeah, instead of flowing people, we have flow paths for the pressures and the air and the velocities, right? So it's kind of a thought, an extension of that. Although I will say it was as you got farther down the road, it became clear that a lot of what Pathfinder was didn't need, you know, like we stripped out a lot of code to really make like Fentas all it needed to be. But I think that was a fairly successful starting point. It helped us get to where we wanted to be within a year. No, fantastic. It's great to hear that you as a software developer and let's be honest, we don't have that many software developers that would be doing tools for 570 engineering in mind as their core products, not as byproducts, you know. So it's great that you hear your people calling for a tool. Yeah, and I think... And this voice. Yeah, that's the best part. I mean, we've had relationships with people because we're already established in the community with PyroSyn and Pathfinder. We had so many users that were like, you know, this other thing we have to do all the time is terrible. We hate it. Could you help us? Right? and we hate it. Could you help us? Right. So it was kind of an extension of those conversations and those relationships. We were there talking to them at an SFP conference anyway, and they would say, hey, this is the thing that we have to do and it's hard and want to do it better. So I would say it probably took some convincing a few years of hearing a few people really request this over and over. And as you that's not as common outside of the United States. And I would say about 90% of our business for PyroSummit Pathfinder is outside of the United States. So that's a fairly small user base compared to the rest of the world who's not really traditionally doing this with Contem. So we weren't hearing it as much, but I think as people realize the capability, like what Ventus is, what it can do, what Contem is, that there will be more opportunity for people to use this outside of just fire protection engineering as part of the MEP toolkit that they're doing their ventilation specifications and testing and modeling and things like that. This is a fast enough tool that gives you a higher fidelity of results than just spreadsheets. And you can test variations of things that are not like most of our users that say they use it instead of a spreadsheet. It's because there's just too many connections. There's just too much going on to work it all out in an Excel spreadsheet. You know, a simple single shaft or, okay, that's not too bad. But if you have shafts and floors with other shafts and stairwells and multiple stairwells, and you want to look at how this change over here impacts everything else, you kind of need the whole network accounted for. And that becomes very complicated with spreadsheets. So I think that's where the opportunity is going to be. And in the future, we'll be able to expand into transient analysis, actually calculating contaminant concentrations over time through different zones. Essential contaminants coming from fire primarily. Could be fire, could be, you know, kind of radiochemicals release, could be chemical, you know, just looking at maybe toxic chemicals, emissions from some source inside of an environment and tracking that around throughout the system. And again, like scheduled, you know, heat changes over time, maybe accounting for sun exposure paths and how that heats and cools buildings and how that might expose to things. So there's a lot that it can do that we have not tapped into in our first release. So that's the idea of where things could go, depending on feedback from folks and what they need to do. That's fantastic. Congratulations on finishing your next. Now you have a trifecta of softwares. It seems that you have to unify them under one software-as-a-service model. No, please don't become Autodesk of a fire. No, no, no. Well, that was an early question was like, should we just put this in one of the existing, should we just hook Contem into PyroSim somehow, like and just use that or into Pathfinder or something. So there was a decision to to make a new installable separate desktop application that just handles this specific requirement. And a huge, I mean, I want to, I can't even begin to express the level of gratitude I have for the Thunderhead development team. I mean, we've hired on quite a few new developers. We've really increased our capacity. The fact that we were able to kind of go from design to a commercial product in about a year is just amazing to me that it feels like yesterday we were just talking to people like, okay, now what do you want it to do? And now there's a thing out, you know, now that now there's a product. So, you know, that capacity, we want to maintain that use. It was really cool to see that all come together with this group. The previous podcast episode, we just mentioned that it's on the list of your things to do, and some episodes later, we were talking about the existing product. Of course, that's great that you introduced the product, but also, I think, for many listeners, it's interesting to even hear about such a software that exists as Quantum in general, and Quantum is still available at NIST. Actively developed. Yeah, it's not going anywhere. And does Contemps have, like, FDS is also well-known for its immense validation collection. Is Contemps also has a validation in some? Yeah, there's validation for the functions and the algorithms and things that are in there. I will say it's a little more simple and easier to get your head around model. It's more direct sort of analytical type calculations. It's not as complicated as FDS. So that's one thing in the favor of it. And those things are documented. I would say like Contam as a project kind of has a lot to learn from FDS. FDS is like a beacon of light in open source where it just has the everything's in the in the open. There's there's the discussion group, the issue tracker, all the sources online. There's a rich history of people sharing ideas and collaborating and it's all there and you can just work on it together as a as a community. And our experience with Contam is it's been kind of the old way of doing software at NIST which was there's a group of people who just work on a thing and they make a thing and they give it out to people and if you want to know more about it you have to almost just do like a one-on-one email and you might get some of the code and you know it's not as liberal as you see with FBS where just everything's out in the open so like it's completely public domain and potentially open source, according to like government copyright and everything. But it's just not open on the web where you can just go look at the project and look at the source files and see what they did and kind of check it all yourself. So there is a little bit of a layer of kind of filtered information that you can get from the project. I will say they've been very generous with us and giving us whatever we ask for whenever we ask for any more information. But it's not quite the same. And I would love to see basically a model like what FDS and CFAST has done where everything is just GitLab or GitHub projects or totally open source public domain. I think that immediately comes to my mind like if you're talking about a whole building pressure solver and now FDS being largely used by people as their go-to compartment fire solver, if Contem is so nicely network-based, and we also know the fantastic capabilities of HVAC solver in FDS, I wonder if there is an easy way to couple them in a way. Because if I have a solution for pressures in my buildings, on leakages, on doors, on the staircases, I could envisage like connecting them to some specific boundary conditions in FDS as inputs. And perhaps these simulations could run concurrently. I mean, if both are NIST solvers, that would be actually quite great to have them. Yeah, to some extent coupled. Yeah, the big difference would be that, you to have them. Yeah. To some extent, coupled. Yeah. The big difference would be that, you know, the advantage of Ventus and Contem over like FDS and PyroSIM is the calculation speed that you can. Okay. Literally, these simulations take seconds to run. Right. So you can simulate the entire building solution in just a few seconds. That same calculation in FDS, even with coarse grid, is going to take hours to solve the same thing, right? So if you need the coupling, I think it's an interesting way to kind of hook up, okay, I have this dynamic fire calculation that's producing changing gas species over time. But I could almost see like that's a pre-processed run maybe or something, and then you hook it up to it or some other 2D to 3D. You know, maybe we pull CFast in here because it can give us some better approximation of what's happening. They would be on the same scale of time, yeah. Yeah, but if you're trying to hook up, you know, it's like hooking up a tractor trailer to a race car, right? Like you just, you know, it could pull it, but it's going to be so mismatched, right? It's really a difficult connection. I don't see the value there, Brian. I see a value that's not technically in speed or improving this part. If you put an open boundary condition to your window in FDS, you literally tell the solver, my pressure at this point is zero. Right. And then calculate me whatever it is, what the net is. Yeah, and if you put an open five meters above, it's not going to know. It should calculate rho gh, static pressure difference. If you put another open boundary conditions, it will be pressure zero again, unless you specify some things. And here, like, just having the pressure background, the initial pressure background of your building that includes the stack effect, the effect of wind and temperature difference between the building interior and exterior could lead to already better informed initial conditions of FDS simulation. It could just be a very nice way to create a more realistic initial condition and boundary condition control over the course of the simulation. Yeah, I think coupling these tools is a really interesting idea. And FDS, so Jason Floyd on the development team now, who's at, I think, UL Fire Research Institute now, he worked on a little coupling, a little feature that he just released the other day, which is now allows FDS to read external files for the states of controls and ramp values. So you could have an external tool that's updating like the value of a ramp input or the state of a boundary, like if something's open or closed or on or off. Wow, that's actually fantastic. Yeah, so now external third-party tools can just update files and FDS can just read those on time steps and know what to do with something. So that really, I think, is going to be an interesting... We were kind of looking at it originally for some way of saying, if agents in Pathfinder come up to a door and the door opens, that the door opens in the FDS simulation, right? That we want to be able to have these things run together and that the Pathfinder simulation could be watching the time step and just keeping up with whatever's happening and predicting the next step. Because it's so much faster, it has to just wait. It's essentially just waiting for time, right? But now it knows, okay, now I can predict the next thing, close the door, open. We very gently switched from discussing the rebirth of Contem into the near future of FHIR modeling. Tell me more. Is there a specific file structure that you need to supply to FDS? Can you amend the source file every time step? Will it work? Yeah, I think right now they're just using CSV. So you just kind of hook it up with the name of the thing and the value. And then in FDS you say this is an external control by this name and then on time step, each time step, it'll look to those files to see what it wants to say. The important point is that it does it every time step, not just once at the start of the simulation. Right. It's runtime, right? So it's checking that file over time and getting the latest values. Wow, this is opening so many possibilities. Because now you can literally make a responsive control outside of FDS. To some other calculation that's happening outside of the simulator. Previously, it was only possible if you just stopped and restarted the simulation, although the process was a little difficult. Or you'd have to rerun something and come up with some prediction of when over time things need to change, and then you just hard code it in the ramp. Now the ramp values can be dynamic in addition to control Boolean true-false states. So it's a really interesting feature that I think opens up a big door, and it just kind of snuck in. It was an issue I created in the issue tracker a while ago, created in the issue tracker a while ago and jason was like i've kind of done something like that for this other project let me see what i can do and he just played with it and it's like wow it's now in there so it's not in the current version of fds so it'll be in a future release i mean they're not the last official release it's happened since 6.8.0 but it'll be available i know jason is a listener to the podcast and i can bet he will be listening to this episode. So, wow, Jason. Thank you. Thank you so much. And what else do you have in your closet? Come on, man. Yeah. My mind is going crazy now. You can literally write a Python processor for coupling things in FTS and just introduce ramps on the go. You can make... So you would use the existing FTS output files, right? And those are updated over time, would be the input to some other processing tool which can then update these values in this file, which then feedback to FDS, and you could just create that cyclical loop, that feedback loop. So that's really cool. That's actually something I've created in ANSYS 2017-ish. We've built a custom code for literally an advanced control banner. We called it the Smart Smoke Control System. There are papers online that you can look up that explain the concept much better. But in essence, it's a system that reacts to the conditions inside and adjusts the properties of your smoke control system on the fly, depending on what the system measures in the building. And these loops were possible to build in Ansys because you could write user-defined functions for your systems. Basically, every time a timestamp would switch to the next one, it would go through a certain round of updates on your boundary conditions dependent on the external functions that were deciding whether to increase the capacity or decrease it. For us, it was a very clever solution of this smart smoke control concept, but we also understood that you could build very interesting feedback mechanisms inside. Like you can couple it with Python PID controller to have, for example, pressurization system that follows the pressure difference drop. It's something very common in here that we would have active systems that follow that. So you can literally building that up with FDS software at this point, before this introduction would be close to impossible. Yeah, there are math controls. You could kind of rig up a calculation within the control system, but you would have to program control a calculation within the control system. You would have to program control system within FDS. Yeah. There's math functions and stuff to have an input get calculated and do a thing. And there is a PID controller in there as well, but I don't know if it's as detailed or as capable as what you might need. And I would say, so if anybody's interested, this was issue number 11615. I created that on March 30th and now we have a feature today. So I mean, Jason jumped on this and just knocked it out. He had a really good insight into how to do it and it's in there. So it's documented now two weeks ago in the user's guide. It's coming in and he gives a little test case and some explanation for that about three weeks ago. So it's relatively new stuff that will be in a future release. But, you know, having these relationships, these connections with people that are able to just do amazing things is just one of the best parts, I think, of like anything I've done. You know, the work I get to do is it's just cool to get to see these things evolve so fast and open up so many doors for people. So it's really fun. And I'm more than happy to share these insights hidden deep in the issue tracker with a more general audience because we're talking about technology that can literally change our engineering. Like, seriously, this is impactful. Yeah. Yeah. So, Jason, this is impactful. Jason, this is important. Don't keep things like that in the closet, please. Yeah. Yeah. I mean, and to his credit, I mean, the response was so fast. Like once the idea was like, hey, this is a thing. He was, you know, just inspired and did it. And it was so nice. So cool to see. So that's a big thing that's coming. I recommend anybody go take a look through that chain of conversation and that issue, kind of see where things go. And if you have other ideas, you know, of like how to extend that or whatever, it'll be good to see. Good to get your feedback too, which I'm like, hey, I tried it and this is what it did. It worked great or whatever. Tie it up to a Python module and see what happens. Yeah, especially that we have already working cases in Ansys in a very similar matter. So there's a possibility for running a comparison between two different codes. So that would be very, very interesting. Yes, for sure. I have a list of talking points. Shall we continue? Yeah, let's go. Yeah, that's great. Fantastic. A lot has happened over the one and a half year. I think that struck me the most, perhaps, and it came kind of unexpected, is the AI revolution and the large language processing models. Last year, I think it was September, like way before the AI, I've listened to a podcast, Jordan Harbinger's show. And he had a guy, Reid Hoffman, that's a unicorn investor from Silicon Valley, is a guy who literally started LinkedIn. And I've listened to that interview once. It went live. Actually, it's an outstanding interview. I love it. But he was talking about, like, AI and large language processing all the time during the... But when I listened to it in September, I didn't catch it. And I was, like, listening, revisiting that interview a few weeks ago. And I'm like, oh, this guy is talking about chat GPT all the time. And that's like months before the public heard about it. So it seems the boss was there in the Silicon Valley for a long time. And it seems they understood the consequences of that quite well. Now we are living in a world of consequences of chatGPT. Of course, it was a great tool. I've had an interview with Mike Kinsey about how such things could be used for the benefit of fire engineers. Very interesting discussion. If you didn't hear that, I recommend that. A lot of great thoughts. But now to close my very long talking point, I see implementation of those tools as APIs in so many aspects of general tools that I'm using, especially podcast related. It's not anymore a browser to which I ask questions and it gives me answers. It is literally integrated and it knows what to do with a press of button, like it can generate show notes for podcast episode. It can mark up the points of the discussion, which are the most interesting in my podcast. So many little things that are done with the press of a button as an auxiliary tools. And if you did not know it's AI powered, you would not even think about it. You could just call them magic powered. So outside of like general bot GPTs that people could build up, how do you see this? Yeah, that's a great topic. And it's something we've been thinking about how we could incorporate things. And I think there's some really interesting issues that arise. One is just the technology itself of kind of how do you take information in a certain format, tokenize it in a useful way, be able to do the vector math on connecting the tokens and creating the suggestions. And like there's a whole technical infrastructure of that. And one of the questions in my mind is how could we do something like feed our documentation into a tool like that so that it gives reliable answers that are actually correct. We did a fun experiment the other day where I googled Thunderhead Engineering, or I didn't google it, but I ran it through the ChatGPT4 system and just said, tell me about Thunderhead Engineering or what are they known for, stuff like that. Well, according to that, we're located in New York City because of Manhattan, which we are not located in New York City. It sounded legit. If somebody would have just told me and I didn't know anything about it, I'd be like, oh yeah, that sounds right. Wow, they sound like an amazing company. And half of it was wrong. So I think finding ways to get high quality, accurate information into the tools so that it can suggest correct answers and not just answers that sound good is a big challenge. I work on another project as a volunteer called the Good Docs Project. And one of the goals of that project is to improve documentation templates. And one of the side projects of that starting up is how do we generate documentation in formats that are ingested by these LLMs in a way that maximize their accuracy, not just reading a website. Maybe that's not the best way to structure information as HTML on a website for these tools to learn from. Maybe there's better ways, better formats, things that we could generate as a byproduct of the work in this format that makes it easier for these things to improve accuracy. So that's part of it, I think. The really interesting question is, you know, how do we get it to read the codes? How do we get it to understand the SFP handbook? How do we get it to accurately process and know this information to a point where it's helpful? And then apply it. So there's a company that we've had some contact with and looking to try to find some interesting integrations with. It's Codecomply.ai is their domain. And they're doing this with kind of from the code compliance point of view. So you can import a PDF of your floor plan. It can use some machine learning and AI tools to sort of interpret the floor plan, come up with like wall lengths, areas, doors, door widths, all this stuff, and then go, okay, based on this, here's some compliance issues that have arisen from an analysis of this floor plan to really kind of streamline that process. And it's not just a linear troubleshooting tree. It's interpreting symbols and making sure that the symbol is correct for the space. And there's a lot of interesting stuff going on in that. So it's kind of classifying everything. It can also output information about it. So maybe the PDF doesn't really say anything about the length, width, height, the walls and doors. Maybe it's in a dimension off to the side. But by using that information in the drawing, it can then say, okay, this particular room has this door in this position, so many meters off of this wall with this width and height can interpret from the 2D drawing of a 3D design. And then we could use that in potentially in PyroSim or Pathfinder as an import. So you could say, I want to import a PDF through this AI tool to then give me all of the geometry where the sprinklers are, where everything is relative, you know, from the blueprint and do a takeoff direct into our tools. So I think there's some interesting tooling around that, you know, to interpret, to process information and come up with a synthetic output, you know, a new output from what you started with. I have also had this discussion with Mike Stromgren, who was also developing some tools like that and automating code compliance, using machine readable codes as the first thing, like turning codes machine readable, so you can actually build algorithms based on the code efficiently. That's a very interesting field of development right now. And I already know some places in the world are actually taking effort to create their codes as machine-readable. That's actually astounding because that's the first step that you need to create these automated routines. step that you need to create these automated routines. These are tasks that would be done by fire safety engineers worldwide. The code whisperers who master the code speak in are capable of verifying that. And making sure you're in the right jurisdiction, that jurisdiction's code-based, those exceptions to the rules that are okay in this municipality that wouldn't be in another. It could start to take account of all of these different variables and then give a reasonable analysis of the space based on that specific set of initial conditions. So I think that's really cool. I think, okay, but these are the tasks that already exist. I wonder, like, what could these things do in the future that you cannot do today? Okay, if you have capability to turn PDF into some sort of machine understood like blueprint of the building, imagine a firefighter comes to the building and there's a fire and it tells him there's a fire in room 101. What's the safest path I can take from this place to the fire? And you could take into account like everything that's happening in the building at that point and give a prediction. Yeah. With a smart building, knowing what doors are open or not could predict the ventilation of the building and do a quick calculation on. Yeah, exactly. Run the content behind the scenes and go, Oh yeah, that route that you would normally take, they know that's going to be ‚Äì actually, the doors are open. It's going to be ventilating right towards you, so you're going to want to go this other route from this, you know, whatever, that you maybe wouldn't even know until you got there. So it could increase safety for firefighters and change some tactics as well. That's a space for my friend Craig, who I just interviewed on Flowpaths. That's perhaps the future there. Another thing I see is mundane tasks like, okay, a lot of us are earning our livelihoods from doing FDS simulations for different projects, for different performance-based engineering projects. And a lot of that work would be running CFD, pinging into outputs, writing a report from the outputs. ChatGPT can read CSV files now in advanced mode. So you can just send it an output CFD analysis, tell it this is my output, my CFD, give it an output of Pathfinder and just tell me is it safe or not. And like looking at the one case, it's interesting already that it could do that. But if you can automate it, what stops you from running hundreds of those simulations, right? Yeah, I think if you, you know, like we already have a concept in PyroSim of scenarios. So you could generate a bunch of design scenarios. You can run all the different scenarios. You could then say, OK, based on all of the answers of all these scenarios, and maybe those all run on cloud computers somewhere because you need to do 100 or 10s or 100s at the same time. You get all of the answers. Okay, now summarize the state. What's the worst condition? What's the best condition? What are the statistically optimal solutions to this? There might be some really interesting ways to parse all that and come up with some recommendations. Do it this way. Based on all of that, this is the best approach or whatever, which is something becoming like expert systems, right? Like using that information to do so. And I'm interested too in like optimizations of things like, okay, we run some simulations and then should we move a door? It would moving this door six feet to the left benefit the flow patterns and clear sails faster or make an easier egress route or something? That's the world of smoke control. Do I need more or less extraction? Is my inlet in this place optimal or can I move it? What's the maximum velocity I can have on this inlet? What's the size of the opening I can manage? Is it better to have five outlets with two meters per second or is it better to have ten outlets with two meters per second or is it better to have ten with one meter per second? This is the type of questions your bread and butter as a smoke control engineer. And I think these tools, they will not replace us because you still need a human to comprehend it and you still need a human to communicate. And double check it that it's not crazy. Double check it, absolutely. Okay, the best summary of the AI revolution was posted on LinkedIn. In the middle of, you know, the chat GPT craze in February, someone would say, like, programmers are down. Like, there's no need for programmers at all now because chat GPT can code. And the response was was like, by implying that chatGPT can replace programmers, you imply that the clients know what they want. Right. And that is absolutely not true. I think the same thing would be in the world of smoke control and fire engineering design. You would always need a fire engineer at the end. AI can go only so far. Well, and it's the prompts, right? It's what you prompt it with. And I think the intelligence is in the prompt when you say, I want this kind of information or I want this sort of analysis or take into account these variables and give me something. I think generative AI is really so heavily dependent on the prompt and the information that it's already parsed. And we're already starting to see chat GPT facing some legality with licensing that it was just ingesting everything and didn't have a license to pull it. It doesn't have license to use it as a derivative work, right? So there's got to be some stuff, interesting stuff with like ethics, licensing and legality, like the information and how it's used. There's some interesting issues to have to resolve. I think that, you know, there's another way to look at this, too, is like in the machine learning space is taking some kind of patterns. So there's been some work recently that we're looking at. We're going to have a little internal like tech talk presented by one of the developers of it. But taking like a 2D or a zone model, let's say, take a zone model and then predict the 3D fields from the 2D data based on where the openings are and the ventilation paths and everything. So you could kind of say, what would the 3D space look like based on what we know about the 2D or these two zones or the velocities in and out? We have a collaboration with a company. It's just starting, and we're waiting for a new supercomputer to really take off that, which we'll reach in just a few minutes. But what they do is you run a CFD for partials. Like, you have a bigger space. You run the CFD for that as a training set. And once the model is trained, you can run a partial CFD. And the point of AI would be to extrapolate these results for the rest. So to take it into the building example, you could first run a CFD of a warehouse for one, two, three, five fire scenarios, and then just model the, let's say, the plume zone, the extraction points, and just leave the rest of the warehouse unsolved, and the AI tool would predict that. Yeah, it can do it quite well, actually. Yeah, the initial, like the preliminary work we've seen, it's like very well done. Like it does a really good job. And this is a little bit, it's augmented by like a zone model. So the zone model predicts the rest of like what's happening and all of the other doors. And then it uses that plus the initial states to come up with like the new convolution of like, here's what everything here's what everything looks like everywhere else. So now you could do prediction of maybe FED calculations through where the headspace would be of people moving around in that 3D field based on the zone models and the way the flow is moving. And if you ask me one and a half year ago, would I expect AI to come here so quickly? I would not say that. I don't think we've said that in our... So that's a near-future prediction we've totally missed. But I think there's a reason why ChatGPT went into some sort of unicorn company worth billions of dollars. I think we're not the only ones on the planet who've missed that. Yeah, for sure. A little better. You know what I also did not envisage one and a half year ago? I did not envisage GPU revolution. And this is something for me that it always has been a dream of mine to have GPU-based Navier-Stokes solver. We had GPU-powered radiation solvers in the past discrete ordinance. You could GPU the hell out of that a long time ago. But you could never do flows in GPUs. And around one year ago, ANSYS has released a final build of ANSYS Fluent solver with GPU-powered Navier-Stokes. It lacked almost everything in that solver. So you basically just had the momentum solver. It didn't have energy, it didn't have species. So six months ago, they've added energy. Now they have added species into that and they're working on adding chemistry, combustion, and stuff like that into the solver. So it is very actively developed. And yeah, GPU CFD is here. And it's here to stay. And once I've learned about it, it's something I've literally dreamt about for decades. And once I have it, we took quite a bold decision to go fully into that. We'll see if that pays off or not. But we're awaiting a new delivery of a new supercomputer that is NVIDIA GPU-based fully, with the full intention to switch into GPU simulations. And long story short, it's 10-fold, 20-fold decrease in computational time compared to comparable cost CPU solutions. So what are your thoughts about the GPU revolution that's on our doors? I think it's very timely in that FDS development is happening in parallel, right? And just recently, I've seen some initial work in this area. So traditionally, the bottleneck, as you know, is like the pressure solution, the global pressure solution. And in FDS has always been kind of the sticking point because you got to solve everything everywhere. It has to wait. You can't just let each core run off and do its own thing, right? It kind of has to sync up. And so that's been a big bottleneck. Well, in recently, there's a version of this pressure solver that is now using GPUs and the problem's been decomposed in such a way that it can be solved, not just in a structured mesh like that we would do traditionally with the FFTs, but in an unstructured mesh. And the big deal about that is that, you know, there's also a new feature in FTS to have non-rectilinear geometry. You can have any shape thing cuts through the Cartesian mesh, the gas solution, the CFD solution. It cuts through those and the cut cell method is applied then on those boundaries. Now you have an unstructured domain. Now you have this unstructured mesh around the solids and being able to solve that in parallel on GPUs in addition to the normal structured solution outside of it. That kind of changes the whole game in terms of how fast FDS computes. And the unstructured mesh solver forever was like 10 times slower, right? Like if you wanted to run FDS with geoms, you're looking at a 10x slowdown. I always looked at the development of these geoms in FDS as something very impressive because Cartesian mesh was like, you know, that was the soul of FDS. The FDS was written with intent that it operates on Cartesian mesh. So if you want to shatter such a fundamental thing of a model, that's very, very difficult. And the developments to introduce tetrahedral mesh as, let's say, boundary layer between the geom and the rest of your model, it looked very impressive. I saw that at one of your FEMTC conferences. Marcus Fenella was showing that. The thing that was not disappointing, but I'm not sure how I have to feel about it, is that he mentioned that the increase in compensation all the time is like what you mentioned, like tenfold. And so now the latest development work kind of recovered that loss. So now it's the same speed as the FFT solve unstructured to do the unstructured mesh calculation. And then that is a breakthrough because otherwise I really struggle to see how this feature would find use in everyday's engineer toolbox. And I, yeah, yeah. I still think that it can't be all unstructured. I don't think that's the answer either. I think we can leverage both speed and efficiency and EFFT and structured mesh when it's all just straight lines and everything's boxy and you can do that very fast and you don't need to get too detailed. But if I have complicated, like a complicated ceiling or geometry that I need to account for, or round walls, things like that don't fit well into, you know, Legoland, I need to still solve those problems and I want to do it as quickly as if I didn't do it. And that's the breakthrough. I think the staple case was the aircraft cargo space where you need overhead and then curvatures. And because the space is so small, like trying to map it with Cartesian mesh, you either end up with a centimeter mesh, which obviously has its repercussion in the computational costs, or you're just simply not able to do it. For me, that is truly a revolution happening in the background with switch to GPU solvers. And CPUs stopped gaining frequency a long time ago. The next-gen CPUs, they don't have 10 gigahertz clocks. They have more cores. And it is something that will always bottleneck. CPU-based CFD. In terms of CPUs, you have much bigger memory thresholds between the nodes. It's a different world of computation, and it's very interesting. Yeah, to see it happening in FDS, too. I saw a long time ago, somebody tried to make one. This must have been 15 years ago or something like that. There was like a fast FDS or something. They were trying to go down that route and it just didn't really work out at the time. And I don't remember the details of like what they were doing, but I almost feel like it's just not technologically ready yet. Like now we have taken another leap in terms of GPU computing and the availability of hardware at a reasonable price that, you know, you can do these super computes inside of a little graphics card that you stick in your machine. It might cost three grand, but it's nothing if it gains you huge amounts of increase in accuracy. And thanks to some cryptocurrency going into proof of stake, not proof of work, the prices of GPUs and the general availability of that technology has exponentially increased. So that's a great development. has exponentially increased. So that's a great development. Last talking point on my list, and also that touches to some extent the computational costs and this aspect of our everyday work, the remote computing, cloud computing. You briefly told me that SabalCore has some great updates, and I know a lot of people would be relating on cloud computing for covering their threshold of engineering analysis. So tell me what's happening in this space. Yeah, so we have been integrated with a cloud computing provider for a little while, for a couple of years now. And that relationship's been great. It has opened up. I mean, that is still growing. So every month or so, we get a report of new users and growth and how much time is being spent, all of that. And it's continuing to trend up. So that's nice to see people leveraging those tools. For years, even before we've integrated with this other tool, I had been kind of harassing Sablecore to like, hey, if we had an API, we could just send work to your system. Like, can you get an API? And there's a lot of work to do on their side. And they have a little bit of a different approach. There is a web-based API, like a REST API you can call directly. But they have a little bit of a different concept where they install a local client that you do your calls to the client through REST API. And then the client takes those and does some really interesting stuff with spinning up VMs and doing this like huge. They have an improved data transfer system through UDP that they use. It's different protocol than TCP IP, but it can handle kind of like this multi-stream to get huge throughput, kind of saturate your bandwidth and everything. So they've got some cool, cool tooling in that that's like built into the client to do these connections and the protocol exchange. So now we would be able to install PyroSim, give you the setup in PyroSim to connect to the local client that would then do these calls. And you could even do something, for example, like open my results in SmokeView, and it would launch a SmokeView app within the client locally that would be basically running in a VM on the remote server. And you'd be able to visualize your data right there. We're looking at trying to do something like that with our results viewer to be able to install that in addition and be able to run that remotely. So you get the, like our, you know, we have a different way of visualizing things and some different tooling. And so we want to get that as well, but that's available now too. We're looking to kind of integrate. I've tried to push the priority on this since I bothered them for so many years to get an API and they finally did it. I don't want to sit on it and be like, oh, cool, thanks. We'll see you in two years. So we're really trying to prioritize that. Have you seen the short version of Redemption? You should send two emails now once they send you a book if you want to build a library. That's right. To translate from IT nerd into human. This means, like, essentially, it really simplifies the process. Like, you probably can get away without knowing any Linux, without knowing any VMware. You can pretty much simply send... Can you send it directly from PyroSim? So you run, instead of running local or running parallel locally, you just say run cloud, pick the service provider, and maybe give it some specs like I need so many gigs of RAM and I want so many CPUs and whatever, you know, based on how many meshes you have and all of that, a few options, and then you say go. And then PyroSim takes all of that information, packages it up, ships it up to the cloud, and then initiates the job, you know, on the cloud resource that starts working. And then from PyroSim, you can monitor all of the jobs, see the status, maybe open those up. Which cloud providers? You mentioned Sablecore. Did you also have AWS? Well, so behind the scenes, so there's usually some interface. So we didn't set up like the AWS or Google computer, anything like that. There's a provider who sets that up. Sablecore has their own data center. This other tool, a cloud HPC that we've been using for CFDFEA is the service, and they're out of Italy. They set up like an application layer on top of all those compute resources. I think they use Google behind the scenes, if I remember right. So they kind of interpret the request and then say, okay, I need to spin up this many instances with this much memory in it. And it does all of that for you. And then hooks up like access to storage and everything through a web UI and all of that stuff. So there's this interface layer that they provide. And for the end user, the cost is pretty much per hour base. Yeah, it's like cents per hour kind of level of thing. Yeah. And I know a lot of them will have some kind of an introductory, like you get 300 hours for free or something up front to go test it. So that's what we always recommend is, you know, people create an account with them. We don't handle the billing or anything like that. We just provide access easily in the UI. So you just say, pick your service provider and go and then you ship it up to them and they, you handle that relationship independently of anything with us. But hopefully the convenience makes it so that traditionally what you would need to do is build your FDS model, export your FDS file, SSH into some remote computer, transfer the files over, go to the command line, create the request for whatever you needed, or generate your own instances with some scripts. It was very nerdy. You had, you had to do a lot. Or somebody had to set it all up for you to do that. And I know some people have done that. We're just trying to get rid of that and make it as easy as a green button. And you go and it runs and you get your data. Making FDS easier was always the bread and butter of PyroSim. I mean, there's a lot more. It It solved the pain of doing the lines of code. Now it can also solve the pain of automatic cloud computing. And for a single run, it's not bad. If you just have to log in and create a thing and run a job, it's not too big of a deal. But what we also want to do is enable people to run multiple jobs concurrently, easily, through some specifications. So in the PyroSim world, we do that through scenarios. So you can build these design scenarios. And then you can right now you have a way of saying export scenarios. You can pick which ones you want to export. We automatically create like a Windows batch script that then runs each one sequentially. The extension of that would be runs export scenarios for cloud. And that would actually generate a batch that would run all the jobs in parallel at the same time on cloud resources. So instead of waiting for the same amount of runtime for each case in serial, you get the longest runtime is the maximum amount of time it takes for all jobs to be finished. So then you're done in like one run instead. You get 10 simulations in one runtime time versus 10 times the run time because they're all running one after another. And the same thing in Pathfinder. We have Pathfinder has a Monte Carlo tool that'll build randomized variations of a base model. So you can do tens or hundreds of those, and it'll scramble up different parameters and things. And then Ventus has the same thing with the weather and wind and temperatures and everything. So we create variations of that. We could run all those. I think probably we'll focus more on PyroSim and then Pathfinder just because Pathfinder and Ventus are so fast to run anyway that you can run, you know, tens or hundreds of jobs locally. But the same capability would be great if you want to do a thousand simulations, variations or whatever. You could do it all at the same time. great if you want to do a thousand simulations, those variations or whatever, you can do it all at the same time. Yeah, that's a huge opportunity, I think, for improving somebody's confidence in their results, that it's not just the answer, one answer that they're basing their analysis on, that they might have, you know, have been able to test, like you were saying, multivariate testing with lots of different parameters to really see what's influencing what and the sensitivity analysis. It's always been talked about with FDS, right? It's always like you should do a sensitivity analysis and a grid analysis and all this kind of stuff. And that just takes so much time and it's difficult and it's tedious. And so we could just get rid of all that and make it do it all at once. You know, that's something we always came to your conferences with, like multi-parametric cases, custom tools to create FDS inputs and process the outputs. But this was the world of academia where we were studying a particular aspect of fire safety with these tools. It's great to see that they also come under the commonly used tools for fire safety engineers to do the everyday engineering. for fire safety engineers to do their everyday engineering. And there is absolutely huge value in using those tools and going from just a single data point in output distributions and then seeing a bigger picture of smart fire safety strategies in your buildings. Fantastic. Yeah, a little more probabilistic. One other, just a quick mention I'll do here too, is in terms of developing new things, we just added a really cool feature to Pathfinder that I don't know if many people are aware of yet. So it'll be something, those who are doing it. We've changed something we called before to attractors. So it used to be called attractors. And that was a way of like something in the domain can modify your behavior. It can like trigger you to do something different than you would have if you were just following your normal behavior. You weren't influenced by that thing. Now we have mobile triggers and mobile triggers can follow positions of occupants. So an occupant moving through the space can influence other occupants dynamically based on their proximity or visualization of them. We have quite a few kind of ideas. This was developed as a side project to help with some risk analysis for different spaces. And it's fallen out of that to be just a general purpose tool that's now available called Triggers. So if you look in the latest version of the Pathfinder manual, you'll see a whole bunch of stuff about Triggers. But imagine a first responder coming into a space. So all of the occupants are evacuating, but then the first responder enters and the first responder has information and a directive to tell people to do something different. And they won't act on that until they can see or are within a distance of that first responder. That can actually change each individual agent into another trigger that can then spread the message. So it can like, now we can almost model information transfer that can influence behavior in Pathfinder that really wasn't a feature before. It was all very spatially based. And now it's, you know, agent to agent interaction based that can modify behavior probabilistically, which is kind of a whole fast, it's kind of opened a door. Like it seems like a little feature, like development wise. Oh, we're just taking this thing and moving it. But now it's like, oh, you can have communication through crowds. You can do all kinds of really interesting stuff that you couldn't do before. So that's a big feature. It's not yet modeling social interactions and, you know, group behaviors and stuff like that, collective behaviors. But it's definitely a tool that you need to start working on using such models. And perhaps coupling that, if you can couple that with Monte Carlo simulations and scenario-based responses of people, that could be actually very interesting. I'm not so sure if many people in engineering will use that because that's quite advanced. And I'm not sure if there is need need for that in engineering projects but certainly I can see a lot of scientists doing that yeah we see it more in like crowd risk people who are engaged in like planning for large crowd events you know it's not fire risk necessarily but just life safety and crowd management type tooling so that's where we'll see more of this, that interagent effects will be really an interesting new feature and has come out also in an area of, unfortunately, we have events where bad actors come into spaces and do bad things and impact agents and their movement and their life, right? But that was one of the goals of this work was to enable that kind of an analysis. And so, you know, without going into too much detail, that's the seed of like, can we do this? And can we have this kind of an interaction happen? And then we just generalize that to make it agent to agent kind of controls. And there is still grouping. You can be a member of a group. You can have family groups and look at that dynamic. But that's a whole new thing. I'd encourage anybody who's doing any kind of like agent circulation or pedestrian or crowd movement simulation to kind of check out that new feature if they haven't yet. See what it does. So we're excited about it. It makes some really cool videos, too. That's good. Good development, Brian. Congratulations. So I guess we'll wrap up on this. As I told you, we can discuss this for hours. wrap up on this. As I told you, we can discuss this for hours. Maybe we should find some more nerds and just do fire stuff updates every now and then. I hope the audience appreciates this type of content. But I mean, you've mentioned a lot of things I had no idea about, so I'm happy to be up to date in the most recent developments in Thunderhead, in FTS, and other stuff happening around the AI or GPU revolution. So I think a great round of updates, and we definitely need to do this perhaps more often than the year apart because stuff is happening. Like every time Jason puts something in FDS, just can you give me a call? happening. Like, every time Jason puts something in FDS, just, can you give me a call? Just track it in the GitHub. Any commits by this user, send me a notification. Yeah, that's great. Just before we wrap, we meet weekly with the FDS development team, and there's a lot of people that new people, new names, working on new stuff. It's been really encouraging for me to see how much, you people, new names, working on new stuff. It's been really encouraging for me to see how much that group grow. It's always been a small core with people coming and going, but we're really seeing that expanding now in that group and a lot of different... There's wildfire, wildland fire stuff that's happening that's very active with vegetation fuels and stuff. There's the stuff with GPU work that's going on. There's the geom stuff that's very active with vegetation fuels and stuff. There's the stuff with GPU work that's going on. There's the geom stuff that's going on. Man, you're just seeing like experts being brought in to really focus on areas to really enhance the whole product. And being able to kind of tune into that weekly, it's been a real privilege to see what's going on and keep up to date with all of that. So I'll try to keep everybody updated as well as I can through things I discover through LinkedIn or whatever. Yeah, it's awesome to see all over the industry, people doing such good work and all the research and everything and how it's not stopped yet. You know, I've been in here for, what, 23 years so far, and it just keeps getting better every year. So it's really cool. But I think statistically we are on the higher end of good people doing good stuff per number of participants of the community. So let's keep it up like that. Thanks, Brian. All right. Thank you. See you around, man. All right. See you soon. And that's it. Thank you for listening. I hope you've enjoyed this little long-ish round of updates on different things happening in FDS development team, at Thunderhead Engineering and worldwide around that changed the environment in which we, FI safety engineers, operate. A lot of technical details of the softwares and tools that we're using. I hope you've captured some updates for the tools that you are using, or perhaps you found about some capabilities that you were looking for and you did not know a tool existed. For me, that's Quantum and Thunderhead deployed GUI called Ventus. That for sure is a nice answer to some of my needs, and I'll be looking into that. Actually, if you know Thunderhead Engineering, they have free trials on every of the softwares, and this new Ventus software is not any else, so you can just go to Thunderhead Engineering and just download and check it out, which I recommend, and I will be doing that shortly. tools, new ways of doing stuff, please let me know. Send me a question, part of the website where you can record yourself or you can send me an email. I would love to gather some questions again and do a proper Q&A episode once more. So if you have any ideas of what should be covered in the podcast or if you have any questions that require an urgent answer, please send them my way and I'll find the answer for you. So thank you very much for being here today with me and see you here next Wednesday. Cheers. Bye. This was the Fire Science Show. Thank you for listening and see you soon.