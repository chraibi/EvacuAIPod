 Hello and welcome to FHIR Science Show Session 39. Today we're back to the world of FHIR modeling and I have invited Brian Klein. Brian is with Thunderhead Engineering Company which is known for their landmark products, software models, Pathfinder and PyroSim. And because I have a chance to talk with someone who's developing software to help engineers solve their issues, let's try and ask him some tough questions about how the user issues are being solved, what are the most demands they meet, how users are using their software and how they are modifying their software to meet user demands. And also some tough questions like is a simple model better or easy to use is that always beneficial i had a lot of questions to brian and he was really kind answering all of them i really hope you will enjoy this one it was huge fun to talk with brian about how new tools are being delivered to the fire science community. And I'm really happy that they listen to the feedback they receive, actually. From this talk, it's obvious that they're working on features that are most needed. So I can also recommend you, if you have something that you would need from your software, well, the best way is to ask for it, and maybe it will be delivered. Though he mentioned the 400- long list of pending issues. Well, maybe if you claim that you came from Fireside Show, maybe it's going to get pumped up a little bit on the list. Anyway, it's a great one. So let's not prolong this anymore. Let's spin the intro and jump into the episode. Welcome to the Firesize Show. My name is Wojciech Wigrzynski, and I will be your host. Hello, everybody. Welcome to Firesense Show. I'm today here with Brian Klein from Thunderhead Engineering, the developer of Firesim and Pathfinder software. Hello Brian. Hi Wojciech, it's good to see you, good to meet with you today. Thanks for coming. Very happy to have you here and you probably create a software that most of us are familiar and using so i have some tough questions for you already and i met your software when i was starting my career in cfd like literally in my master course that was probably the first time i've been exposed to fire cIR CFD was through PyroSim. I probably didn't even know that the FDS is the backbone and the solver of that. I wonder, do you still get that people confuse PyroSim with FDS? And I see that in papers, actually. Yeah, yeah, we do. I would say it's not as frequent confusion, but we definitely get questions. You know, so we'll get an email that's like, so tell me, what's the difference between PyroSIM and FDS? And it's like, it is FDS. PyroSIM is just, you know, a preprocessor to help you build the input file easily and as error free as possible. And error in quotes, because the inputs could certainly be wrong, but the syntax should be correct. And then a visualization or post-processing tool that we put together for visualizing the output of FDS. But under the hood, of course, is the FireDynamics Simulator. And we use the same binaries that we get from the NIST site. So we don't compile our own special version. We don't mess with that. And there's some advantages to that primarily in VNV. We don't have to rerun the suite to rebuild and make sure we're getting the same answers. We just use the exact same binary that's been run and tested and reported on from NIST. But yeah, it is a confusion. And even on our website, it's like right on the PyroSim homepage, it says, you know, for fire dynamic simulator, FDS, and we talk about that. But still, it's something that if you're not familiar, if you don't even know FDS as a thing, first of all. Well, to give credit where credit is, the FDS is an amazing piece of software. And for myself, I find it as one of the biggest achievements in the world of fire science. There was Handbook, there was CFAST, now there was FDS, these things that really gave a push and democratized access to powerful tools. Yeah, and I think the story of FDS is pretty interesting. It's probably not for this episode, but, you know, that in summary, there were all these submodels. So there was like a radiation to target submodel and there was a heat transfer into a solid submodel. And there are all these, you know, chemical reaction in the gas phase submodel so all these different algorithms that people have been developing in the 70s and you know in 80s and stuff and then and at NIST you know each little there was kind of different research teams that were working on the numerical model to do this and they would publish it and whatever and it took like a mathematician an applied math guy to come in and go I could put these together you. I could assemble all of these algorithms into a cohesive system that can work together to solve larger phenomena, more complex phenomena than any of the individual parts. And you almost see that in the source code, right? There's like a RADI.F90, there's a pressure solver that's sort of reflected in that decomposition into the models. I once wanted to find out how they solve emissivity for smoke for radiation mode from the suit. And it was like, okay, we use radical model of this. Okay, what's radical model? And then there's like this hundred page long manual for a model to do that. And it's one of hundreds underlying models in FDS. And each model comes with an assumption, and there's a whole technical document that NIST produces for that. When I joined NIST, primarily, it was a little bit complaining to Kevin about how things were working. I need source control, and I need to be able to look at differences between releases, and where's your changelog, and how do I report a problem and stuff. So back in 2006, I was hired by NIST. As a git. Yeah. Well, and I was kind of complaining and Kevin was like, well, can you come help us fix it? We're not a software development project like that. We're a bunch of researchers trying to do something useful over here at NIST and producing software isn't our specialty. And I had some familiarity with source control and software development. So I put together the original Google Code project, got all the source online, got the discussion group started on Google groups. So that's on you. Good to know. Yeah, and then, yeah, that's my fault. Thank you very much, sir. Got that set up and then even like automating B&B and publishing some of that stuff, I worked a bit on the automation of the plotting and all of that stuff in the beginning. So I'm trying to make it something that had an outward face that could be interacted with by the users because it was it was really like sending Kevin an email. Right. That was the way you and if you wanted the source code, he could send you a zip file of the latest version of the files that he had compiled from everybody else sending him zip file. It was working, but it couldn't scale like that. So and then we started all that and it's gone, you know, wild since then. And a huge credit to SmokeView as well. Like, I don't think FDS would be as well received if it wasn't for SmokeView. Like, that's just a huge compliment to FDS to have that tool that visualizes in 3D what's happening, which gives you such good qualitative insights, I think. And when did you decide that there's a preprocessor missing to fill out, to complete the puzzle? Yeah, so that was before I joined Thunderhead. There was a SBIR. These are the Small Business Innovative Research Grants that come out from the government periodically. And there was one for making preprocessor tool for FDS. And so Thunderhead had already had success with PetroSim, which was a preprocessor and postprocessor for a series of tools from Lawrence Livermore National Labs. And so they had already got a framework for taking a solver and wrapping it with a preprocessor and postprocessor toolkit. And so they made a bid on that and was awarded that SBIR and got that initial funding to develop PyroSim as a wrapper for FDS. And I actually remember when that happened because I was still on the user side of things when PyroSim was released. I was still using FDS, sitting down with the text editor and cop pasting text and fussing over all of that. And I remember PyroSim was released. I was still using FDS, sitting down with the text editor and cop pasting text and fussing over all of that. And I remember PyroSim came out and I was like, oh my gosh, this is like, this is such a time saver. This is so useful and became a PyroSim user first as, you know, trying to do my work. And I started before NIST. I was working for a private research laboratory called the Western Fire Center in Washington State in the US. And it was a private lab. So we did a lot of litigation support doing reconstruction type work and fire modeling related to reconstruction. And standardized testing for building code compliance was the other big part of that. I was able to start my experience with FDS. I think it was just around when version three released in a laboratory with the experimental resources. So, you know, if I ran a model of a room, I had data, real data that was from a burning room that I could compare my results to and kind of almost do many validations using that experimental data, which I thought was really valuable for me to understand the connection between, I could make some inputs and get a result and it's nothing like what actually happened. I could make some inputs and get a result, and it's nothing like what actually happened. And as a user, how big was the jump for you to suddenly have a graphics interface on the software? Because I think many people today, they never go through the phase of writing their own FDS code. Yeah, in fact, it was pretty great. So before PyroSim, what we had done, I feel like any level of complexity of a model, once you get past just a couple of boxes and you need walls and door structure, it gets very difficult. And the hardest thing I think is that in the text file, you don't see what you're doing. It's really difficult to visualize from a bunch of OBST lines, from a bunch of these obstructions, where things are, if they're meeting up to each other, if there's gaps, you know, how things are positioned. So you had to go through this iterative cycle of adding a few input lines and then running a zero-time simulation to open it in SmokeView and look at the model. Oh, I need to fix that and go back and fix. And, you know, you had to keep like this thing. As far as these tools, the 3D preprocessor really just as you're creating it, you're seeing what you're doing. You get that immediate feedback and that really saves you time. So before PyroSim, I was using a tool called Vectorworks, which is kind of a CAD package. And actually we hired somebody, I had some initial scripts written, but we hired a developer to write some more automation scripts to help take like locus points and convert them into devices and take objects and decompose those into obstructions. And we're almost trying to make like a PyroSim type tool, but in a CAD package. And I think other people did similar things. I think now there is some other packages existing. I know my colleagues from Poland did something called WizFDS. I think it's an online tool. I know there's like two or three different macro sets for AutoCAD that you can use to translate. And like Blender FDS, right? And Blender FDS, yeah. Blender was, even when I started, there was already Blender and there was a manual GC very active in that part. Yeah, so the thing we wrote for Vectorworks was a lot like Blender FDS, where it was like you model in this modeling tool and then you use this package to extract or export a bunch of things to FDS input. But having a dedicated tool like PyroSim that's like its focus is just building FDS input files. It's not a general CAD package with a lot of bells and whistles. It's very like narrowly focused on that, I think is helpful because learning a whole CAD tool, learning Blender just to get FDS files is like a big leap. I always had this with these tools. For geometry, it's obvious. If you want to build a building model, it was obvious you need the tool because, as you mentioned, you go above a few obstacles. You either have to be a genius in imagining three-dimensional space with coordinates or, I don't know, some sort of gift to be able to project in your mind what these coordinates mean. With geometry, it's obvious. However, for setting up the fire reactions, I think maybe the user interface is just too easy way to do that. You know, you have a window with default options. I somehow always liked the magic of writing it as a code, having to think about what the variables are, looking how they connect to each other. Even today, when I'm using your software and commercially, we're using ANSYS. So I'm not doing actually that much FDS simulations. But for scientific research, we use FDS a lot. And even then, I usually love to build the geometry with a preprocessor, but then still mess a bit in a code. And, you know, maybe it gives me this false feeling of control over the simulation. Maybe you just feel closer to what you're doing. It's not this magical box. And it is dangerous to have boxes when you're dealing with such powerful pieces of software, right? Yeah, yeah, I agree. And that's actually a goal. Like nothing should be a black box. And defaults, we've gone through various stages. Even the FDS project has gone through various stages of providing defaults to people, you know, providing libraries and things like that. Yeah, I remember the material library that was there. Then it disappeared. And I remember that discussion. It was interesting. Yeah then it disappeared and I remember that discussion. It was interesting. Yeah. And so that's something that there's this balance, right? Between where helping somebody make the process more efficient, more effective. Like if I have to define a reaction, I don't want to spend a bunch of time looking through the table of all of the input parameters and figure out which ones apply. You know, it's hard enough just figuring out what the input should be, let alone like the structure and all the possible parameters and everything, especially that's true with surfaces, right? Like the surface, the table of parameters for surf is like, I don't know, 40 different inputs or something possible for a surf name list. So the UI for PyroSIM has really been designed to help collect relevant parameters and show those in particular contexts to help sort of minimize the overhead of figuring out what you need to input and really focus the user on the essentials that are required for that part of the definition of a surface or a reaction or whatever. And not, I would say there's a few defaults. Maybe that's just a requirement of the data model, you know, like starting with a heat release rate per unit area value and not zero. And maybe it would be better to just set it to zero instead of a thousand or whatever it's set to. But there's always warnings that come with these are just the starting value. This is not what you use, right? This is just a number that's in the box. But you need to type in what you're supposed to type in based on your vent area and your heat release rate and everything that you're supposed to do. And that could be confusing, I think, to new users. What is hard about this balance is we don't want to make it hard for advanced users to get their job done. But by not making it hard for advanced users and being really ergonomic and everything, it makes it easier for new users to get wrong things too, right? So we have added a few things in like warnings. So if you don't define a reaction, but you create a burner, we don't create a reaction by default. We don't create propane or whatever. We don't write that in now. I think we used to. We used to have a propane or a default reaction or polyurethane or something like that, just so something would work if you ran it. And then we decided, actually, it's not a very good idea, right? Because now people make a burner and they run and they get a fire and they're good. like it looks burning yeah they see smoke and they see fire and everything looks good but we stepped away from that and now we just throw a warning like hey you have something that's requiring combustion but you haven't defined the reaction so you need to go do that and then it puts it back on the user now they got to go into reactions and now we do have a library of reactions that they could pull from a library but again those do come from sourced data. They come from some, like this reaction was used in this literature, it's whatever. So it's a starting point to give somebody placeholders. But again, it's a sort of burden is on the user to make sure that those inputs that are in their library actually reflect the model that they're making. And to give somebody a way that they can put their own reactions back into a library to reuse. So the mechanism is super useful, but it could be misused. And I sort of struggle where that should be caught, right? Should it be caught by the software, make it really hard to use, or not help anybody make it easy? Or should it be caught on the review? If there's a new user, somebody should be looking at what they're doing, right? There should be a knowledgeable engineer or staff member or even a third party review somewhere. Maybe the authority who's reviewing it, somebody at somewhere has to go, why'd you use a thousand kilowatts per unit area, right? Like for your key release rate per unit area, why not 500 or 250 or 300? You just use the default, right? And we have had conversations about building like auditing tools to look for defaults, right? To help an authority like, yeah, run the, put your FDS file in here and it'll flag, hey, this is a default value. Oh, that's a great idea. And maybe there's some good tooling. We could do that in PyroSim. Okay, these are all still defaults. Do you want to run with these defaults? Okay, good. And then go. We have the advances and it says, okay, this model is chosen, it's left in default. You've used this model but have not defined a species related to that. Or this numerical scheme is used with this turbulence model and it may cause this and this. And window by window, it gives you relevant information on possible threats related to the quality of the simulation. That's actually quite useful. possible threats related to the quality of the simulation. That's actually quite useful. And the second check is related to mesh, and it gives you information about the mesh quality, skewness. Yeah, we've added some new mesh warnings. Like if things aren't open, like if you didn't open your boundaries or don't have any kind of connection to ambient, like there's a warning now that this is probably not going to run well. And at least just get the user to reflect on the choices they've made without verifying every input. But say like, hey, these are some known pitfalls and try to expose those early in the process. I don't necessarily think we shouldn't make hammers harder to use just because somebody could not build a house right. Knowing that the tool is not going to give you the answer, but it's a data point in your rational analysis. You know, you have this one answer from one simulation. Maybe you need to do five or six more to get a little bit more data to increase your confidence. And I think that's a broader topic than just like how the tool works. Yeah, but as a tool developer, you find out that someone is using a tool in a ridiculous way based on default values or using some misconceptions. You must have this urge to try and prohibit that, but there must be limits so you don't limit the advanced user who knows what they're doing. So how we deal with that as a developer, that always intrigued me. Yeah, so I mean, that is a good point. That's why we backed away from default reactions, because we noticed that people weren't being careful. So without increasing the burden too much, we just made there be a small hurdle, right? Like you can't run because you don't have a reaction. So you got to go define it, right? And then that just, that forces the user back into like, oh man, now I have to think about a reaction, which is critical. Like that's the whole foundation of it. They should have thought about a reaction already. They didn't. But it's just to help remind people to make better choices where we can in the tool. And we're looking at doing some things like that, even with mesh sizes, for example, like meshing. Like, hey, one goal of meshing is that each mesh should have approximately the same number of cells, right? Well, if we have a situation where you have one with a million cells and one with 300 000 cells you could say hey this there's some imbalance in your meshing right like you might want to go think about how you've balanced your load you know and you could make that choice but you could it could stop somebody from being inefficient with their computational work and go back to that and we've even made some tools to help mesh to say like decompose this mesh into some number of meshes that have an equal number of cells, right? Yeah. I've heard about that. I haven't used that one yet, but I've heard about the plan and it's like, wow, that's so cool. I've used to do that on my own with a calculator in my hand, making sure that you can divide it by two, three or five. And that was quite a lot of fun. I appreciate if you did it automatically. And we do even have warnings of that too, like your cell scale. It's good if the cells are more cubic than more of a stretched rectangle, right? So it won't stop you, but it just flags it in the UI. This is a one-to-one-to-four ratio. You might want to change this one and maybe even a suggested value to get it back to one-to-one-to-one, right? I think that's the thing. It's a constant kind of feedback cycle with our users to see what they're doing right, what they're doing wrong, and then using that information to try to tune the software to be better at the end goal, which is ultimately making the process of making accurate models as quickly and as easily as we can. I really wonder what type of issues people come to you, like your customers, I really wonder what type of issues people come to you, like your customers, because I live in a silo. We all live in a silo. I talk with researchers and we sometimes may discuss the amount of angles for radiation model. Sometimes I may discuss a way how to, I don't know, model all three modes of heat transfer for a plate thermocouple or something. But I really doubt this would be the issues that the end users have. I really wonder what's like from the user perspective, your customer perspective, what is the needed developments and where could we assist? Yeah, so one is just the computational load, how to take a complex problem and run an accurate simulation in the shortest amount of time. What strategies do we use? How do we do that? Because you can really make a mess for yourself, you know, and if you're not being efficient, if you're not blocking out unnecessary cells, there's a lot of techniques that there's almost an art to it currently. And so that could all kind of go away in some ways if we had different ways of defining the mesh, which maybe is a more automatic. You could do some kind of like adaptive mesh refinement system where, you know, we use some metrics within the simulation to drive the resolution at specific zones or areas. And that all happens automatically based on some quality thresholds or something that the user defines. We have the denuncias as well, scale adaptive simulation, but not truly using that much because it also brings a lot of challenges on its own. Yeah, and I think that's part of why we don't have it in FDS already too. I know Randy worked on that a bit and just found like it became very difficult. But it would be magical if this happened regardless of you, if you could just define qualitative metric to do it for you. And it would also prevent your stupid decisions. It will prevent you running a model with like half meter mesh because it runs faster, right? Well, and especially big problem with meshing now is that what you get at time zero is what you get by the end of the simulation. And often a lot of situations, the phenomena, the fire dynamics are transient in time and space. So, you know, what you mesh for the first five minutes of the fire isn't necessarily what needs to be meshed for the last five minutes of the fire, right? So you're, by having to mesh at zero and never changing the mesh, it really is not optimal. But for shorter duration simulations where everything's pretty much the same in time and space, then it's okay. And I think that that would really change that whole problem. The whole like, how do I mesh this? What's the best mesh resolution, mesh sensitivity studies? There's a lot of effort that goes into this, just the way we mesh. And if that changed, that could be a big benefit. But that's an area of research. That's a big project. Somebody wanted to try to add adaptive mesh refinement into FDS or have some ideas for how to do that. I know that's a significant undertaking, but it would be an area of work. Reactions, and I would say solid phase reactions and just that, material properties, how to get real objects converted into FDS input is always a struggle. And then testing that, you know, like just making sure that for the heat in, you get the reaction out, you get the decomposition step correct, you're getting the pyrolysis right, you're getting the right fuels out of it, that the energy balance is correct and in depth and all of that, I think. I was always scared of that. Yeah. I was always scared of that. Yeah. As a fire scientist, I have very, very little trust in my ability to really model that well. And I would consider myself somewhere around an advanced user. For sure. I've done TGA. I hope I understand how it works, but it scares the hell out of me to model pyrolysis. And if it was that simple, advanced models like GPyro for FDS would never exist. There would not be a need if you could just turn it into a simple Arrhenius reaction and give me two variables and we're done. It's not as simple. And yet I think there's a whole group of people who maybe even think that it's necessary for the simulation to be credible. Because did I really simulate fire when I didn't have my solid phase to gas phase model? I mean, it's curious. And then again, I go back to my simulations and I define heat release rate. I define soot yield, heat of combustion. That's pretty much it. And these are the things that will matter after all, no matter how complex the reaction was in between. If you force a model to release two megawatts, it will release two megawatts, no matter how many steps the reaction has. Yep. Well, and if you're using a burner, it's going to keep pumping that fuel mass out at whatever rate you specify, regardless of how much oxygen is available and the energy feedback and all of that. It rate you specify, regardless of how much oxygen is available and the energy feedback and all of that. It just keeps pushing gas. I was always scared of that. I always went towards the minimalization of the inputs I do and to cut as much out as possible. Well, that must be an interesting struggle that new users may have, defining reactions and maybe even believing that it's so necessary to have that part, right? Well, I think part of it is we know how reality works. You know that you have something, you make it hot, it starts to burn. Then based on what it is, smoke comes out with certain chemistry and whatever. And you have an expectation that, well, if you have a fire simulator, then it's going to do the same thing. It's going to simulate fire, right? Yeah, that's in the name. I have some things and I heat them up and they burn and fire spreads around the room over the carpet and everything just like it would do in reality. And FDS doesn't really have the physics of the same thing. That's the story of my CFD start, man. Maybe I've told you the story, but the first time I've started like PyroSim and I was like, okay, let's simulate something easy. Like what's the easiest thing? Let's burn a log of wood. And I've built a model. I've put a piece of wood and the first one didn't ignite. The second one exploded. And I think that's actually an interesting field of science. This wood doesn't want to burn. And did you model the lignin and all the components of the material? I was super smart and sassy back then. And I've done all the tricks in the SFP handbook and the goddamn woods. It either kept exploding or it didn't catch fire. And you know what's funny about that is that could have been just a mesh resolution issue too, right? Or could, yeah. Completely unrelated because you were averaging out the temperature on the surface too much. Exactly. You didn't get to the ignition point, right? Like there's a lot of complexity in just that. But then again, I have never used the same model ever again in my professional career. That was in the school, but in a professional career, no, here's like design fire scenario that you need to model and it's alpha t squared and you just put it as a hard boundary and that's it yeah and i think that's a key point is that the majority of fire protection engineers for example they're using design fire they're being more explicit about controlling what's happening in the environment they're maybe using curve ramp curves instead of flame spread right and because their fds is in this weird space where it's it was designed to be a very practical tool for engineers to get a good enough answer in a reasonable amount of time. And so it's sort of tuned for that workspace, but it has all of these more detailed capabilities. You can go down to DNS mode and simulate the decomposition of a wick, of a candle flame and all of that, like at a very small scale. So you get this like hybrid experience of, well, what's a very practical use of FTS to build a fire that gives you enough information that you can make a rational decision about? Or do I keep going deeper? Do I start getting into the research area of this where I need sprinkler spray to pre-soak my materials and then suppress my fire and get the momentum transfer into the gas phase accurately. So there's a lot of research in that area to get all of that detail, but then how much of that can be transferred back up to a practical level where I need to get a few answers in a week or so and have a good sense of what's happening in this building and if my smoke handling system will do the job or not. And I think there's all these little pitfalls where people like, oh, that's a feature. I should use that. And it's like, actually, that's kind of over in this research space that nobody really fully understands yet. There's not good models or we just know we're not going to go down that path because there's other tools that are better at that, right? Another example, I would say, of common issues and frustration is the conversion of real geometry into this Lego block world, right? And there's some problems that come from that. And it's dependent on the mesh. It's dependent on some other things and how you model it. And so somebody will take an architectural model of a building and import it into PyroSim and make a mesh around the thing and expect it to be what they brought in, right? And not this rasterized, blocky, stair-stepped version of it. There is a reason why solto's false is there is such a line and it's gone away. Yeah, you can't do that anymore. But there is work going into what is now called geoms. It's a new record set where you can do this in Merced Boundary Method or the IBM's method. And so now you can have this non-regular geometry in the Cartesian mesh and there's this cut cell method that's applied to try to deal with that. But it comes with more computational cost. I won't expect people to model their whole building in the Emerged Boundary Method, but maybe critical geometry that's like, you really want to get the in and out of the surfaces correct and the flow around the object. Okay, I'm going to challenge you. I heard about this first time in FMTC in Malaga, I think it was. It was Marcus Vanella presenting the first approach with that. And it was super impressive, this immersed boundary method, but he mentioned it increases the computational time, but by a factor of some, I don't remember the number, but it was a significant factor, like twice or three times. And I was like, Dan, if that's the case, it's not going to be ever used. People would rather find lazy workaround or approximation rather than use a technique that increases computational time by a factor of two or three. And you don't even have to go that far to future set of features. We are here today and we have the mesh resolution. You cut the mesh size by half, you increase the computational time 16 times. Well, I'd rather have a 2x increase than 16, right? Oh, yeah, okay. Right? So that's, I think, where that value might be is, like, if I have just one part of the model that I need some good resolution around that space or around that object or that surface, the rest of the model could still be blocks. You don't need to, right, use the whole thing, immerse boundary method. It's just certain objects within the scene that are really critical to, you know, maybe you feel like those are critical to the analysis or maybe smaller scale things. But I mean, look at where computing has come, computing power in the last two decades. The clusters I was building when I was working at Western Fire Center are like weaker than my cell phone now, right? With GPUs and scaling. So I think that there's optimizations, there's things that can happen that can improve our ability to solve harder problems at the same speed or faster. But sometimes it just might be the question of time, cost, and accuracy, right? Like so maybe you don't need to spend the time. It's a decision, that's an engineering choice, right? That's something a user has to go. Is it worth extra? Like, how much more do I get out of this? Is it worth the cost? Maybe it is, maybe it isn't. So I don't think it's going to be the default. Like, everybody should just import their whole building, run it all, immerse boundary, and just, you know, pay the cost for the entire building. And have amazing doorknob aerodynamics in the room. of aerodynamics in the world. You see the flow around your trim and your door frame and everything. Yeah, I don't see that as like, that won't be how it will be. Let's hope for that. You've touched the computational power. There are funny ways you can spend your computational power, you know, not necessarily on the accuracy. It's very tempting to go into multiple scenarios or what-if analysis or parametric studies. And we see that in evacuation modeling, where basically the calculation time, I wouldn't say it's irrelevant, but even very complex models you can get under an hour. It is completely different timescale than CFD. I would say it's not a part of the optimization equation. And I wonder where it would go in CFD. And you sit here as a developer, you observe this growth of power every three years, it doubles or whatever the more low says. How does the user change using your model? Do you see they start using finer meshes or they just double their profits by running twice the projects? Yeah, I hadn't mentioned that yet, but that's also probably one of the more common support questions we get is, so I started this model and it says it's going to take six years to finish. How can I get it done? And it's like, okay, my guess is your model is not well defined in a way that is computationally efficient. Let's just say it that way, right? You have 200 million grid cells. You probably need like 3 million, right? Like, I mean, there's ways you can optimize this stuff. And I do, I have seen, I don't think Moore's law is holding because we've been all kind of around 4 gigahertz for 5 years, 6 years, right? I mean, like nothing, you don't have a 10 gigahertz chip, right? Or a 20. So we've hit this plateau around three to five. And now, yeah, you see more cores. So now the problem is like not clock speed, but parallelization. And how do we like spread this problem out over more cores? And there's been work, you know, Suzanne Killian has been working on new pressure solvers to help decouple the pressure solution to make it more parallel so that we could take smaller parts of the model and distribute those calculations over multiple cores more easily without that direct coupling that happens in the global pressure solve. I think radiation is also perfect for decoupling. Exactly. So some of those strategies, I think, can make that more efficient and may make up time. And then we can scatter. We've added some cloud computing capability into IRISIM. There are services like SableCore and CFDFEA and others out there that, you know, you can spin up these instances of virtual machines that have 96 cores and terabytes of memory and everything. And you can run these calculations there. And I think that focusing on effective ways to parallelize these calculations that take advantage of these computing platforms offer is going to be an important one moving forward. Especially if we start adding in more calculational load, computational requirement, like with the immersed boundary method or other improvements in accuracy, we've got to spread that additional load in some way. And I don't think it's going to come in the form of faster clock speeds. At least in any future, I can predict we're just going to need to find ways to use more cores. And you're right. There's another opportunity, which is we've added like a scenarios feature into PyroSim. And we have some other work to help and make it easier to make like multivariate equation or multivariate calculations or test sets where you could take like, let's say heat release rate per unit area, for example, and you say, I want to test like a min-max bound on that. And it'll automatically generate the cases for all of these bounding, which is something people do manually right now. A lot of times they'll go 10% below, 10% above, check the result and look at the phenomena of interest, making tools to help people generate those test sets or those, you know or minimize the number and help them make a good set of scenarios that they can then run all at the same time on maybe cloud computing or something. And in the same day or two that it would normally take to get the answer to one question, you might get 100 back, right? Or you might get 10 back because you ran all 10 at the same time. You can run 100 together. You can run 1,000 together if your wallet allows for that, which is in a way a beautiful concept and opens a complete new array of possibilities, but it creates challenges. It creates challenges with processing the data that will come back to you. So if you are working on ways to allow people to do the simulations, are you working on ways to collect the data and reduce the results in a way? Yeah, that's another area of work. That was actually an idea when I joined Thunderhead, it was like 11 years ago or whatever, was like we want this kind of risk analysis system where we can run lots of scenarios and reduce that down to statistical views on what the probability of things are, you know, what's the probability of failure based on a set of runs that have explored all these different variables and the impact on the phenomena of interest, right? And so that's now that we've kind of like we've opened that box, like now we're opening the box to the cloud computing, which immediately demands, okay, now I have 500 gigabytes of data sitting up in the cloud somewhere that I need to get an answer from. What do I do? Do I download it all? Do I download it all to my computer and start running Python scripts to try to process all this stuff? Or is there some tooling that we can use, maybe even cloud-side services that can help collect the information and aggregate it and then process it and give you, you know, maybe a web view of your data. We're exploring some like solutions to how to deal with the big data problem, because now that hasn't really been a problem, right? More people were restricted computationally, historically. You know, I only have so many cores or I only have two computers in my office that I can work with. The computational capabilities have expanded, which then has generated even more data that has to be reduced back to something reasonable that you can use to inform your analysis. My dream would be to reduce the complex analysis to a single number. I've mentioned that in episode 13 with Wolfram that when I do a pump, I want the pressure to flow chart. When I do a complex duct, I usually would like a pressure loss. And that's it. I don't care about the fancy vectors inside. I don't need that. I would know as much from my simulation seeing just this single number or single chart than going through hundreds of images. Yeah, I've almost thought of it like, imagine a probability curve and here's your threshold value. What's the probability of exceeding the threshold? We do that in RISC. You go FN curve, you have a RISC threshold level, you have outcome of all of your scenarios combined fatalities to probability, and you can compare that. There was an excellent PhD in Gantt, Barton Weinberger, and he had some papers from it, who did response surface modeling with FDS as well, and he was going very, very deep into that. And it would be really great if we could somehow move people away from single-point calculations into this approach, because it gives you so much broader view and understanding of what's happening in your model and understanding of the physics that's going around. And any consequence of uncertainty, right? Exactly, yeah. Like if I don't know exactly the density of the material, but I've tested sort of reasonable bounds and looked at the result of the heat transfer effect of that, then it increases my confidence a little bit in that I know reasonably well what it is. Worst case, you know if it's important or not. Right, exactly. How sensitive is it? Exactly. And if it's important, then you can research it further. So it also gives you another view on your simulation. And I think the tools that we currently have do not really promote this sensitivity analysis. It's hard enough to make one model and run it and get an answer, right? Not run 100 or run 50 or whatever number you need to run to get a more comprehensive view on the results. So, yeah. I also wondered, and that's a challenge to you as a developer. Maybe you will not like it. I can cut it out if you hate it. Can we have like a CFast with PyroSim, you know, or something like a zone model that would use the same sort of inputs? I'm a huge fan of zone models. Thank you for plus one-ing my future requests. That's been a long time. We already have so much in PyroSim that to basically try to establish room volumes and connections like you need for CFast is not a lot more information. But it does add some complexity,, you know, it's one of those cost benefit things, you know, that you have to make these choices. We have limited number of developers. We have limited number of years. What's the most important spend on our side to get people the features they need and want or the tools they need and want? Another example is, you know, people have come to us complaining about Contam is great. I use it for every project and it's terrible to work with, right? It's like so hard to use. I have it on my list just after the zone model. Yeah. So that's actually come to us way more often than CFast. So we've taken that on as, you know, we're starting work on a Contam GUI, essentially, you know, some tool set to help make modeling in Contam a lot easier. And to help make modeling in Contam a lot easier. And what's really interesting about that is what people mostly complain about is the Windows build of Contam that uses the little sketchpad and trying to work with that. That's the hard part, is the tool. And under the hood, there's ContamX, which is this real abstract, generic node network system calculation tool. So we're not really trying to recreate the Windows thing, but really leverage that more abstract system. Just build on the network model that exists. That's cool. What's also on your magical list? Tell me. Well, I can't give away all of our secrets. But yeah, those opportunities are what we look for, for people who really find this pain point. We use this tool all the time and it's terrible. Or we always spend way too much time doing this kind of data processing or whatever and if we if we get enough of that it inspires us to try to like find a way to solve that problem for people and make the tool that will make their job easier and we're not in the business of competing you know thunderhead doesn't do fire protection engineering or analysis we're really a tool builder so come to us with your problems and your struggles and your pain, and we'll try to find ways to make it easier. And that's a big effort. You know, that's what we try to do. But yeah, the few things I mentioned, those are probably the highlights. In the Pathfinder world, there's some work to help make like rail car simulation and stuff like that easier. And, you know, with like dynamic obstacles and things like that that can happen during the simulations. There's always something. and things like that that can happen during the simulations. There's always something. Like I said, I think Pathfinder has something like 400 feature requests sitting in queue waiting for somebody to work. And we have scaled up development. When I started with Thunderhead, there were five of us. I was the fifth. And now there's, I think, 17 people, not all full-time, but with some interns and some full-time staff and stuff. And we've really grown our developer set, our group. So we're now able to churn through these hopes and dreams that people come to us with and start producing something more quickly. Okay, for the last question, let's go BIM integration. My colleagues in office say that I was not, to the listeners, I was not paid to say that at all. But it's an honest opinion. Like, your BIM importer is magical. And it works for us at least. For Pathfinder? For Pathfinder, yeah. Yeah, yeah. It's magic. It works so well. And it's so useful. And, you know, BIM to CFD is this sort of, I don't know, dream for the engineers that you could just take a model in one computer press calculate and you have CFD done. And I agree it would be fantastic, but in a way we come back to the challenges of the beginning of the episode where people not even knowing that Firesim is not FTS would be running fire simulations because they have the button to do so. And there's nothing to stop them. And the smoke will be there and fire will be there. So I wonder, what's your take on BIM fire integration and what's the future for it? So that's great. That's a great question. And it is an area of work. So we've even just recently with Pathfinder, there's some really good work happening with Lund, with Enrico and Nazim there, and Pete Thompson at Autodesk. We're all kind of working on some new expanded parameters that can come in the BIM model that we can then, in Pathfinder, read in to use to help even more efficiently build a model, like how many people are in the room, what kind of profiles are in the room. That stuff could be defined in the BIM model. In BIM. That makes sense. That's what BIM is for. We'd use that as input, build a model, run it, right? And then the output of Pathfinder gets re-imported back in and stored in the BIM model for like, what's the flow rate at the door? What's the time to leave the room? Stuff like that. So you get this like full life cycle kind of a thing. So taking that idea, that concept that we're doing pretty well in Pathfinder now and are working to improve using as much information as we can from what's been defined in the BIM model, right? So if you've defined your material properties and you have a density set, for example, or you have some thermophysical data that is stored in the model, reading that in and using that to build a surface and materials that have the information. So we wouldn't be inventing a material for you. Like if it said it was covered with carpet, but didn't have any thermophysical properties, we wouldn't define what carpet means for you. But we would stub in a placeholder and say, you have a material here. It needs to be, it's not fully defined yet, but we could, because we already know this association with the material and the surface, then it's, if you just fill in this information, then you'll have thermophysical properties for this solid. And where there's a door in Pathfinder, we generate a door element in the navigation mesh. In PyroSim, the equivalent would be maybe a wall with a hole in it with an obstruction in the hole that's already kind of set up as a door that you could open and close or whatever. So same thing with windows. If we know there's glass and there's glazing. HVAC would be magical. HVAC, exactly. Like where's the Venn? What's the Venn area? What does it connect to? We could reinterpret that stuff. Yeah. So there's a lot of room for improvement in that. And as we're continuing to work more in BIM and the IFC files, being able to intelligently extract that data and use it to at least create a good starting point, that would be just a lot of busy work to build it. You've already defined it. So we're not inventing information. You've already defined this in a model somewhere. We're just converting it into the same definition of those things, but in a different context, which is sort of an FDS model version of that. So yeah, there's room for that for sure. And it is one thing that's been on our list. Now, like I said, I even gave up the talk of the webinar recently about BIM can be insane, right? Like you could have all your piping and plumbing and hinges and doorknobs and all that. Like there could be a lot of detail in there that you have to go through some reduction step to convert it into more simplified fire models. So that's also like, how do we, without just bringing everything in, maybe we bring in the CAD just for visualization, but under the hood, we've really reduced this down to just where the walls are and the floor slabs and kind of remapped that detailed version of the building into a more simplified rendition. I honestly think that for many years, I thought the way how meshing works in FTS is a disadvantage. For many years, I thought that. Because it's the way how Cartesian mesh is built that you have to build a mesh to incorporate your surroundings, then build your walls inside. It is sometimes annoying. You have troubles with shapes and so on. But now that we have to go into the world of BIM with our software and I have to do a very complex and structured mesh on this mess of doorknobs, hinges, seven layers that define the pipes. I would love to have a model that just pops me a rectangular grid cell and doesn't care if there is 17 small cords going through it or not. I think in a way it's something that I thought that FDS is its weakness. It can actually be a huge favor in the world of BIM. Yeah, and I think a lot of people, they'll take in these complex geometries. They'll use it as really as a reference for using the really simple PyroSim like wall tool and slab tool and stuff to draw these simple objects. And using their cat as like snap referencing so they can say oh the wall goes from this corner to that corner they don't care about all the detail and the trim and everything like that they're kind of just reducing all of that out by redrawing a wall object where those in 3d already in the movie so then you can kind of ignore the cad version of that wall because you've recreated an equivalent essentially in 3D with a simple object in PyroSim. And so those kind of conversions people are doing manually, I've talked to quite a few people that, you know, they have this gigantic, beautiful building and it's like, yeah, but if this is my FDS version of it, and it's just very simple walls and very simple floors and some big objects that are like the critical components of that environment that the FHIR model needs to know about, and not all the subgrid stuff or unessential characteristics. Let's close on this one. Okay, Brian, that was great having you. I know that you have a conference going on in my neighborhood soon-ish, so maybe let's advertise it. I want more people in it to have beer with. Yeah, that would be awesome. So we're planning for this September to do the sixth Fire and Evacuation Modeling Technical Conference, which is a mouthful. So we say FEMTC or Femtech. I've heard it say all different ways. So if you go to FEMTC.com, that's the website for the event. And there's a way to pre-register that you're interested in. Let us know if you'd want to be in person or virtual. It will be a hybrid event. So we will be in person and live streaming at the same time. That way, if I mean, COVID has thrown a wrench in everything, we ended up having to go you know, all the efforts we've done so far with vaccination and masking and all of the public health stuff, that it's paid off enough that by September we'll be able to travel. People will travel easily and feel safe to be there. So that's something we've considered. There's a backup plan to go just pure virtual if we have to. But we really hope to be in person. Yeah, it needs to be in person. Yeah, I don't care about you. I person yeah it needs to be in person yeah i i don't care about you i'm going to but no yeah yeah even if the conference is not happening there we're gonna host a rogue event i'll be there yeah the uh we've been working with our we have a distributor there of your cognitive tomas apatar and he's been helping find great events locations things to do while we're in the city and uh we're really looking forward to it. So Call for Papers is open now. It just opened up. You'll see that information on the website on the event page. And we're just a quick abstract, no more than 300 words, just a quick idea of what you would like to talk about. And let us pick. Hopefully we get enough good ideas that we can put together a conference. This is not really like a revenue generator for us or anything. If we break even, we feel like we've done a good job. We try to keep costs low and maximize the value. We put all the talks and everything for free on the web. So you'll see every past event has a YouTube video for the talk and a PDF of the paper. And we really try to spread this. This is part of our, I would say, advocacy mission where we're trying to really promote the work of others in the field and get information out to as many people as possible to help kind of raise all boats together. So yeah, we're really looking forward to another great event. I can confirm I've been into two or three, I think, and all of them were great. It's one of my favorite conferences. The location is convenient. It's in Brno in Czech Republic where you can get probably from any place of the world flying to Prague or Vienna and moving by train. So it's quite easy to get from wherever you are. And I think it's worth it. So I'm sure I'll be there. Looking forward to that. Yeah, it would be great to get everybody together again. Just as many new faces and familiar faces as we can. Let's hope for that. If it's online, you'll have to stream beer in some sort of way. That's going to be quite a technical challenge. We'll have to see. Maybe Meta or Facebook has come up with a new way to share beer in VR. Oh, no. Let's keep fire safety in the metaverse. Great talking with you. Thank you. Thank you so much. It was great. It was a pleasure. See you around, Brian. That's it. I hope you've enjoyed this one. I certainly did. It's really interesting to view the world of fire modeling through the eyes of a developer. And so many aspects are being brought that probably the end users do not really think about that much. I really liked one thing that Brian mentioned, and that was the review mode for PyroSim that would allow to review FTS code. And I honestly think this would be an amazing feature in engineering offices for the authorities or the firefighters who go through the simulations. This would actually be quite a good innovation that would help improve the general quality of a code if there was an easy way to review what has been done in the code. I'm highly supportive for this development and I hope they deliver. And from what was mentioned, I also enjoy the BIM importer that's in the Pathfinder that really works like magic. I'm amazed by this tool and I hope this makes more appearance in the world of FHIR modeling and CFD modeling because that could be another step forward. And I also love the cloud computing aspect of our talk where we've discussed how you can really benefit from scaling up the computational capabilities and go into hundreds of simulations and what you get from that. So actually plenty of good practical takes from this talk with a developer. And as mentioned in the introduction, please go push him for the things that you want. Maybe plus one on the idea of CFast in PyroSim. I would absolutely love that and I would be thrilled to have that. And plus one on the idea of CFast in PyroSim. I would absolutely love that and I would be thrilled to have that. And plus one on the quantum in PyroSim. That's also a great, great idea and it will help so many people and so many new people will use that tool. So, wow, great development. Anyway, I hope you've enjoyed that. I hope you've learned something new i hope this episode brought some new ideas how you can work with your fire engineering modeling projects not only with the tools brought by thunderhead but also with all other tools because some concepts are just universally good ideas not really related to a brand or a company and yeah that will be it for this episode thank you very much much for listening. And see you here next week at the same time. See you. Bye. This was the Fire Science Show. Thank you for listening and see you soon.